import java.lang.reflect.Type

// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    dependencies {
        classpath 'com.github.kezong:fat-aar:1.3.8'
    }
}
plugins {
    id 'com.android.application' version '7.1.2' apply false
    id 'com.android.library' version '7.1.2' apply false
    id 'org.jetbrains.kotlin.android' version '1.5.30' apply false
    id 'com.chaquo.python' version '11.0.0' apply false
}

def modulePropertiesFile = new File("${rootDir}/local.properties")
def moduleProperties = new Properties()
moduleProperties.load(new FileInputStream(modulePropertiesFile))
def doPack = moduleProperties.getProperty("do_pack")
def isDebug = moduleProperties.getProperty("is_debug")
def isPackTest = moduleProperties.getProperty("is_pack_test")

task packDemoAar(type: Exec) {
    if (doPack == "true") {
        println "packDemo : doPack == true"
        if (isDebug == "true") {
            println "packDemo : isDebug == true"
            commandLine( 'gradlew.bat', 'pack_demo:assembleDebug')
        } else {
            println "packDemo : isDebug == false"
            commandLine( 'gradlew.bat', 'pack_demo:assembleRelease')
        }
    } else {
        println "packDemo: doPack == false"
        commandLine('gradlew.bat', '-v')
    }
}

task packAar(type: Exec) {
    if (doPack == "true") {
        dependsOn packDemoAar
        println "packDemo : doPack == true"
        if (isDebug == "true") {
            println "packDemo : isDebug == true"
            commandLine( 'gradlew.bat', 'pack:assembleDebug')
        } else {
            println "packDemo : isDebug == false"
            commandLine( 'gradlew.bat', 'pack:assembleRelease')
        }
    } else {
        println "packDemo: doPack == false"
        commandLine('gradlew.bat', '-v')
    }
}

//删除原有的aar文件
task deleteFile(type: Delete) {
    if (isPackTest == "true") {
        delete 'app/libs/pack-debug.aar'
        delete 'app/libs/pack-release.aar'
        delete 'app/libs/pack_demo-debug.aar'
        delete 'app/libs/pack_demo-release.aar'
    }
}

task copyAar(type: Copy) {
    if (isPackTest == "true") {
        dependsOn deleteFile
        println "copyAar : isPackTest == true"
        if (isDebug == "true") {
            println "packDemo : isDebug == true"
            from 'pack_demo/build/outputs/aar'
            into 'app/libs'
            include "pack-debug.aar"
            from 'pack/build/outputs/aar'
            into 'app/libs'
            include "pack_demo-debug.aar"
        } else {
            println "packDemo : isDebug == false"
            from 'pack_demo/build/outputs/aar'
            into 'app/libs'
            include "pack-release.aar"
            from 'pack/build/outputs/aar'
            into 'app/libs'
            include "pack_demo-release.aar"
        }
    } else {
        println "copyAar: isPackTest == false"
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}